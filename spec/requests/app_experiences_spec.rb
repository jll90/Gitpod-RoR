require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/app_experiences", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # AppExperience. As you add validations to AppExperience, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: AppExperience::VALID_NAMES.sample 
  }}

  let(:invalid_attributes) {
    { name: 'foobar' 
  }}

  let(:url) {
    api_app_experiences_url
  }

  describe "Creation" do
    context "unauthenticated" do
      it "returns 401" do
        post url, params: { body: nil }, headers: RequestsHelpers.build_headers, as: :json
        expect(response.status).to eq 401
      end
    end

    context "with valid parameters" do
      it "returns 201" do
        token = create(:token)

        expect {
          post url,
          params: { body: valid_attributes }, headers: RequestsHelpers.build_headers(token.key), as: :json
        }.to change(AppExperience, :count).by(1)
        expect(response.status).to eq 201
      end
    end

    context "with invalid parameters" do
      it "does not create AppExperience and return 422" do
        token = create(:token)

        expect {
          post url,
               params: { body: invalid_attributes }, headers: RequestsHelpers.build_headers(token.key), as: :json
        }.to change(AppExperience, :count).by(0)
        expect(response.status).to eq(422)
      end
    end
  end
end
